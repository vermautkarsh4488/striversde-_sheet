#include <bits/stdc++.h>
 bool dfs(int node , int parent , vector<vector<int>> &adj , vector<int> &vis)
    {
        vis[node] = 1;
        
        for(auto it : adj[node])
        {
            if(!vis[it])
            {
                if(dfs(it,node,adj,vis)==true) return true;
                
            }
            else if(it!=parent)
            
                return true;
            
        }
        
        return false;
        
    }
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    int V = edges.size();

 vector<vector<int>> adj(n+1);
    for(int i=0;i<m;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }

vector<int> vis(n+1,0);
        
        // string ans = "Yes";
        for(int i = 1; i<=n; i++)
        {
            if(!vis[i])
            {
                if(dfs(i,-1,adj,vis) == true)
                {
                    return "Yes";
                    
                }
            }
        }
        // ans  = "No";
        return "No";

}
