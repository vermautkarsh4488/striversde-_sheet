
void fxn1( BinaryTreeNode<int> *root , vector<int> &ans1)
{
    if(root == NULL) return;
  ans1.push_back(root->data);
  fxn1(root->left,ans1);
  fxn1(root->right,ans1);


}
void fxn2( BinaryTreeNode<int> *root , vector<int> &ans2)
{
    if(root == NULL) return;
  
  fxn2(root->left,ans2);
  ans2.push_back(root->data);
  fxn2(root->right,ans2);
  

}
void fxn3( BinaryTreeNode<int> *root , vector<int> &ans3)
{
    if(root == NULL) return;
  
  fxn3(root->left,ans3);
 
  fxn3(root->right,ans3);
   ans3.push_back(root->data);
  

}


vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    vector<int> ans1 , ans2 ,ans3;
    fxn1(root,ans1);
    fxn2(root,ans2);
    fxn3(root,ans3);
    vector<vector<int>> ans;
    ans.push_back(ans2);
    ans.push_back(ans1);
    ans.push_back(ans3);

    return ans;


}

solution ------------->>>>>>>>>>>>>>2...........------------------>>>>>>>>>>>>

 

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){

    // Write your code here.

    if(root==NULL)

        return {{}};

    vector<int> pre,in,post;

    stack<pair<BinaryTreeNode<int>*,int>> st;

    st.push({root,1});

    while(!st.empty())

    {

        auto it = st.top();

        st.pop();

        if(it.second == 1)  // preorder // because in preorder root pos is 1(root,left,right)

        {

            pre.push_back(it.first->data);

            it.second++;

            st.push(it);

            if(it.first->left)

                st.push({it.first->left,1});

        }

        else if(it.second == 2)  // inorder // because in inorder root pos is 2(root,left,right)

        {

            in.push_back(it.first->data);

            it.second++;

            st.push(it);

            if(it.first->right)

                st.push({it.first->right,1});

        }

        else    // postorder    // because in postorder root pos is 3(root,left,right)

        {

            post.push_back(it.first->data);

        }

    }

    return {in,pre,post};

}
