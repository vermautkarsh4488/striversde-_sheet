int cutRod(vector<int> &price, int n)
{
	// Write your code here.
	 int val[n + 1];
        val[0] = 0;
        for (int i = 1; i <= n; i++) {
            int max_val = -1;
            for (int j = 0; j < i; j++)
                max_val = max(max_val, price[j] + val[i - j - 1]);
            val[i] = max_val;
        }
        return val[n];
}


another solution ---------------->>>>>>>>>>

int t[1000][1000];

int cutRod(vector<int> &price, int N){

    int n=price.size();

    vector<int> len;

    for(int i=1;i<=n;i++){

        len.push_back(i);

    }

    for(int i=0;i<n+1;i++){

        for(int j=0;j<N+1;j++){

            if(i==0 || j==0){

            t[i][j]=0;

            }

        }

    }

    for(int i=1;i<n+1;i++){

        for(int j=1;j<N+1;j++){

            if(len[i-1]<=j){

                // t[i-1] -- >t[i]

                t[i][j]=max(price[i-1]+t[i][j-len[i-1]],t[i-1][j]);

            }else {

                t[i][j]=t[i-1][j];

            }

        }

    }

    return t[n][N];

    

}

 

 

 

 

 

 

 

 

 

 

 
