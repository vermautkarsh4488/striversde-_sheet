#include <bits/stdio.h>

int fxn(int src  , vector<int> adj[] , int vis[] ,int pathvis[])
{
  vis[src] = 1;
  pathvis[src] = 1;

  // queue<pair<int,int>> q;

  // q.push({src,-1});
  // while(!q.empty())
  // {
  //   int node = q.front().first;
  //   int parent = q.front().second;
  //   q.pop();
    for(auto it : adj[src])
    {
      if(!vis[it]) {
        if(fxn(it, adj, vis, pathvis)==1)
          return 1;
      }
       else if(pathvis[it])

        return 1;
      
    }

    pathvis[src] = 0;

  
  return 0;

}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.

  vector<int> adj[n+1];


  for(int i = 0; i<edges.size(); i++)
  {
    int f = edges[i].first;
    int s = edges[i].second;
    adj[f].push_back(s);
  }

  int vis[n+1] = {0};
int pathvis[n+1] = {0};

  for(int i = 1; i<=n; i++)
  {
    if(!vis[i])
    {
      if(fxn(i,adj,vis , pathvis)) return 1;

    }
  }

  return 0;


}
