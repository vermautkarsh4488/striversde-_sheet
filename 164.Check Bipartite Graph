bool dfs (int node , int colored , vector<int> color , vector<int> adj[])
{
	color[node] = colored;

	for(auto it : adj[node])
	{
		if(color[it]==-1)
		{
			if(dfs(it,!colored,color,adj)==false) return false;
		}
		else if(color[it]==color[node])
		{
			return false;
		}
	}
	return true;

}


bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.

int n = edges.size();

vector<int> adj[n];
for(int i = 0; i<edges.size(); i++)
{
	for(int j = 0; j<edges[0].size(); j++)
	{
		if(edges[i][j]==1)
		{
			adj[i].push_back(j);
			adj[j].push_back(i);
		}
	}
}
vector<int> color(n,-1);


for(int i = 0; i<n; i++)
{
	if(color[i]==-1)
	{
		if(dfs(i,0,color,adj)== false)
		{
return false;
		} 
	}
}
return true;

	
}
