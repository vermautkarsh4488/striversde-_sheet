 int fxn( int w , vector<int> &wt , vector<int> &val , int n ,vector<vector<int>> & dp )
    {
        if(n==0 || w==0) return 0;
        
        if(dp[w][n]!=-1) return dp[w][n];
        
        // fxn(i+1,w,wt,val,n);
        if(wt[n-1]<=w)
        {
            return dp[w][n] =   max(val[n-1] + fxn(w-wt[n-1],wt,val,n-1,dp), fxn(w,wt,val,n-1,dp));
        }
        else if(wt[n-1]>w)
        {
            return dp[w][n] =  fxn(w,wt,val,n-1,dp);
            
        }
        
        
        // return max(taken , not_taken);
        return 0;
        
    }
int maxProfit(vector<int> &val, vector<int> &wt, int n, int w)
{
	// Write your code here
	 vector<vector<int>> dp(max(w+1,n+1) , vector<int>((n+1),-1));
      
       
       return fxn(w,wt,val,n,dp);
       
}
