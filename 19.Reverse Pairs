#include <bits/stdc++.h> 

void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr
 while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }
 while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

int Rivers_pair(vector<int>&arr , int l ,int m , int h)
{
	int cnt = 0;
	int r = m+1;
	for(int i = l; i<=m; i++)
	{
		while(r<=h and arr[i]>2*arr[r])
		 r++;
cnt +=  (r-(m+1));
	}
return cnt;
}
int mergeSort(vector<int> &arr, int low, int high) {
	int cnt = 0;

    if (low >= high) return cnt;
    int mid = (low + high) / 2 ;
   cnt += mergeSort(arr, low, mid);  // left half
       cnt += mergeSort(arr, mid + 1, high); // right half
	   cnt += Rivers_pair(arr,low,mid,high);
	    merge(arr, low, mid, high);  // merging sorted halves
return cnt;
}

int reversePairs(vector<int> &arr, int n){
 return mergeSort(arr, 0, n - 1);
}
